# standard modules
import logging  # logging lib (terminal & file)
import sys      # to stop script execution on case of error

# dependency modules

# local modules


# get logger with current name
log = logging.getLogger(__name__)


########################################################################################################################
def assert_is_dcm2niix(list_param: list[dict]) -> None:

    is_key_ConversionSoftware = ["ConversionSoftware" in dic for dic in list_param]
    if not all(is_key_ConversionSoftware):
        log.error(f'at least one .json do not have "ConversionSoftware" field')
        sys.exit(1)

    ConversionSoftware = [dic['ConversionSoftware'] for dic in list_param]
    is_dcm2niix = [content == "dcm2niix" for content in ConversionSoftware]
    if not all(is_dcm2niix):
        log.error(f'at least one .json was not generated by "dcm2niix"')
        sys.exit(1)

    log.debug(f'checking in all .json if "ConversionSoftware" == "dcm2niix" done')


########################################################################################################################
def assert_all_key_val(list_param: list[dict], key: str, value: str) -> None:

    try:
        list_key = [dic[key] for dic in list_param]
    except KeyError:
        log.error(f'"{key}" entry is not present in all .json files')
        sys.exit(1)

    is_value = [content == value for content in list_key]
    if not all(is_value):
        log.error(f'at least one "{key}" is not "{value}"')
        sys.exit(1)

    log.debug(f'checking in all .json if "{key}" == "{value}" done')
