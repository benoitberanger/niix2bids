# standard modules
import sys               # to stop script execution on case of error
import re                # regular expressions
from typing import List  # for function signature

# dependency modules
import pandas   # for DataFrame

# local modules
from niix2bids.classes import Volume
from niix2bids.utils import get_logger


########################################################################################################################
def assemble_list_param(volume_list: List[Volume]) -> List[dict]:

    list_param = []
    for volume in volume_list:
        list_param.append(volume.seqparam)

    return list_param


########################################################################################################################
def assert_is_dcm2niix(df: pandas.DataFrame) -> None:

    log = get_logger()

    is_key_ConversionSoftware = 'ConversionSoftware' in df.columns
    if not is_key_ConversionSoftware:
        log.error(f'No .json file has "ConversionSoftware" field. '
                  f'Please use "dcm2niix" : https://github.com/rordenlab/dcm2niix')
        sys.exit(1)

    is_dcm2niix = df['ConversionSoftware'] == 'dcm2niix'
    if not all(is_dcm2niix):
        log.error(f'At least one .json was not generated by "dcm2niix". '
                  f'Please use "dcm2niix" : https://github.com/rordenlab/dcm2niix')
        sys.exit(1)

    log.debug(f'Checking in all .json if "ConversionSoftware" == "dcm2niix" done.')


########################################################################################################################
def assert_has_patientname(df: pandas.DataFrame) -> None:

    log = get_logger()

    if 'PatientName' not in df.columns:
        log.error(f'No .json file has "PatientName" field. When using dcm2niix, use "-ba n" option.')
        sys.exit(1)

    has_PatientName = df['PatientName'].isna() == False
    if not all(has_PatientName):
        log.error(f'At least one .json do not contain the field "PatientName". '
                  f'When converting with "dcm2niix", use the option "-ba n" to disable anonymization')
        sys.exit(1)


########################################################################################################################
def assert_key_val(df: pandas.DataFrame, key: str, value: str) -> None:

    log = get_logger()

    if key not in df.columns:
        log.error(f'"{key}" entry is not present in all .json files.')
        sys.exit(1)

    is_value = df[key] == value
    if not all(is_value):
        log.error(f'at least one "{key}" is not "{value}"')
        sys.exit(1)

    log.debug(f'Checking in all .json if "{key}" == "{value}" done.')


########################################################################################################################
def slice_with_genericfield(df: pandas.DataFrame, fieldname: str, regex: str) -> pandas.DataFrame:
    return df[df[fieldname].str.match(regex)]


########################################################################################################################
def slice_with_mracquistiontype(df: pandas.DataFrame, regex: str) -> pandas.DataFrame:
    return df[df['MRAcquisitionType'].str.match(regex)]


########################################################################################################################
def slice_with_imagetype(df: pandas.DataFrame, imagetype: str) -> pandas.DataFrame:
    """
    ImageType example :
    ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'TE1', 'ND', 'MOSAIC']
     0           1         >>2<<
     """
    return df[df['ImageType'].apply(lambda x: x[2] == imagetype)]


########################################################################################################################
def slice_with_imagetype_original(df: pandas.DataFrame) -> pandas.DataFrame:
    """
    ImageType example :
    ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'TE1', 'ND', 'MOSAIC']
     >>here<<
     """
    return df[df['ImageType'].apply(lambda x: x[0] == "ORIGINAL")]


########################################################################################################################
def clean_name(input_str: str) -> str:
    """
    remove all non-alphanumerical character
    """
    output_str = re.sub(r'[^A-Za-z0-9]+', '', input_str)
    return output_str


########################################################################################################################
def get_phase_encoding_direction(input_str: str) -> str:
    if input_str == 'j':
        return 'PA'
    if input_str == 'j-':
        return 'AP'
    if input_str == 'i':
        return 'LR'
    if input_str == 'i-':
        return 'RL'


########################################################################################################################
def keep_ndim(df: pandas.DataFrame, ndim: str, seq_regex: str) -> pandas.DataFrame:
    df_ND = slice_with_genericfield(df, 'MRAcquisitionType', ndim)
    df_bad = df.drop(df_ND.index)
    for _, seq in df_bad.iterrows():
        vol                   = seq['Volume']
        vol.reason_not_ready  = f"non-{ndim} acquisition with PulseSequenceDetails = {seq_regex}"
    return df_ND


########################################################################################################################
def fill_echonumber(df: pandas.DataFrame, value: int = -1) -> pandas.DataFrame:
    nan_in_EchoNumber = pandas.isna(df['EchoNumber'])
    if any(nan_in_EchoNumber):
        df['EchoNumber'] = df['EchoNumber'].fillna(value)  # DataFrame CANNOT iterate overs groups with nan
    return df


########################################################################################################################
def get_mag_or_pha(df: pandas.DataFrame) -> str:
    mag_or_pha = df["ImageTypeStr"].split('_')[2]
    if mag_or_pha == 'M':
        suffix = 'bold'
    elif mag_or_pha == 'P':
        suffix = 'phase'
    else:
        suffix = ''
    return suffix
