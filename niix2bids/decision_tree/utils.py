# standard modules
import logging  # logging lib (terminal & file)
import sys      # to stop script execution on case of error

# dependency modules
import pandas

# local modules


# get logger with current name
log = logging.getLogger(__name__)


########################################################################################################################
def assert_is_dcm2niix(df: pandas.DataFrame) -> None:

    is_key_ConversionSoftware = 'ConversionSoftware' in df.columns
    if not is_key_ConversionSoftware:
        log.error(f'no .json file has "ConversionSoftware" field')
        sys.exit(1)

    is_dcm2niix = df['ConversionSoftware'] == 'dcm2niix'
    if not all(is_dcm2niix):
        log.error(f'at least one .json was not generated by "dcm2niix"')
        sys.exit(1)

    log.debug(f'checking in all .json if "ConversionSoftware" == "dcm2niix" done')


########################################################################################################################
def assert_key_val(df: pandas.DataFrame, key: str, value: str) -> None:

    if not key in df.columns:
        log.error(f'"{key}" entry is not present in all .json files')
        sys.exit(1)

    is_value = df[key] == value
    if not all(is_value):
        log.error(f'at least one "{key}" is not "{value}"')
        sys.exit(1)

    log.debug(f'checking in all .json if "{key}" == "{value}" done')


########################################################################################################################
def slice_with_seqname(df: pandas.DataFrame, seq_regex: str) -> pandas.DataFrame:
    return df[df['PulseSequenceDetails'].str.match(seq_regex)]


########################################################################################################################
def slice_with_seriesdescription(df: pandas.DataFrame, seq_regex: str) -> pandas.DataFrame:
    return df[df['SeriesDescription'].str.match(seq_regex)]
