# standard modules
import logging           # logging lib (terminal & file)
import sys               # to stop script execution on case of error
import re                # regular expressions
from typing import List  # for function signature

# dependency modules
import pandas   # for DataFrame

# local modules
from niix2bids.classes import Volume
from niix2bids.utils import get_loger


########################################################################################################################
def assemble_list_param(volume_list: List[Volume]) -> List[dict]:

    list_param = []
    for volume in volume_list:
        list_param.append(volume.seqparam)

    return list_param


########################################################################################################################
def assert_is_dcm2niix(df: pandas.DataFrame) -> None:

    log = get_loger()

    is_key_ConversionSoftware = 'ConversionSoftware' in df.columns
    if not is_key_ConversionSoftware:
        log.error(f'No .json file has "ConversionSoftware" field. '
                  f'Please use "dcm2niix" : https://github.com/rordenlab/dcm2niix')
        sys.exit(1)

    is_dcm2niix = df['ConversionSoftware'] == 'dcm2niix'
    if not all(is_dcm2niix):
        log.error(f'At least one .json was not generated by "dcm2niix". '
                  f'Please use "dcm2niix" : https://github.com/rordenlab/dcm2niix')
        sys.exit(1)

    log.debug(f'Checking in all .json if "ConversionSoftware" == "dcm2niix" done.')


########################################################################################################################
def assert_has_patientname(df: pandas.DataFrame) -> None:

    log = get_loger()

    is_key_PatientName = 'PatientName' in df.columns

    if not is_key_PatientName:
        log.error(f'no .json file has "PatientName" field')
        sys.exit(1)

    has_PatientName = df['PatientName'].isna() == False
    if not all(has_PatientName):
        log.error(f'At least one .json do not contain the field "PatientName". '
                  f'When converting with "dcm2niix", use the option "-ba n" to disable anonymization')
        sys.exit(1)


########################################################################################################################
def assert_key_val(df: pandas.DataFrame, key: str, value: str) -> None:

    log = get_loger()

    if key not in df.columns:
        log.error(f'"{key}" entry is not present in all .json files.')
        sys.exit(1)

    is_value = df[key] == value
    if not all(is_value):
        log.error(f'at least one "{key}" is not "{value}"')
        sys.exit(1)

    log.debug(f'Checking in all .json if "{key}" == "{value}" done.')


########################################################################################################################
def slice_with_seqname(df: pandas.DataFrame, regex: str) -> pandas.DataFrame:
    return df[df['PulseSequenceDetails'].str.match(regex)]


########################################################################################################################
def slice_with_seriesdescription(df: pandas.DataFrame, regex: str) -> pandas.DataFrame:
    return df[df['SeriesDescription'].str.match(regex)]


########################################################################################################################
def slice_with_seqvariant(df: pandas.DataFrame, regex: str) -> pandas.DataFrame:
    return df[df['SequenceName'].str.match(regex)]


########################################################################################################################
def slice_with_mracquistiontype(df: pandas.DataFrame, regex: str) -> pandas.DataFrame:
    return df[df['MRAcquisitionType'].str.match(regex)]


########################################################################################################################
def slice_with_imagetype(df: pandas.DataFrame, type: str) -> pandas.DataFrame:
    """
    ImageType example :
    ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'TE1', 'ND', 'MOSAIC']
     0           1         >>2<<
     """
    return df[df['ImageType'].apply(lambda x: x[2] == type)]


########################################################################################################################
def slice_with_imagetype_original(df: pandas.DataFrame) -> pandas.DataFrame:
    """
    ImageType example :
    ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'TE1', 'ND', 'MOSAIC']
     >>here<<
     """
    return df[df['ImageType'].apply(lambda x: x[0] == "ORIGINAL")]


########################################################################################################################
def clean_name(input_str: str) -> str:
    """
    remove all non-alphanumerical character
    """
    output_str = re.sub(r'[^A-Za-z0-9]+', '', input_str)
    return output_str


########################################################################################################################
def get_phase_encoding_direction(input_str: str) -> str:
    if input_str == 'j':
        return 'PA'
    if input_str == 'j-':
        return 'AP'
    if input_str == 'i':
        return 'LR'
    if input_str == 'i-':
        return 'RL'
